{"version":3,"sources":["components/MergeSort.jsx","components/quick.jsx","components/Body.jsx","components/linear.jsx","App.js","index.js"],"names":["getAnimations","array","animation","length","auxarray","slice","mergeSort","start","end","mainArray","middle","Math","floor","console","log","k","i","j","push","domerge","getAnimation","quick","arr","left","right","index","l","r","pivot","Swap","sortingUsingPivot","leftIndex","rightIndex","temp","Body","useState","setArray","resetArray","size","prompt","randomNumber","random","Array","width","quickSort","a","arrayBars","document","getElementsByClassName","value1","value2","barStyle","style","setTimeout","backgroundColor","height","id","class","href","className","onClick","window","location","reload","visibility","getElementById","animations","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","key","linearSearch","barIdx","bool","map","value","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.66867e10.chunk.js","sourcesContent":["\r\n\r\n\r\nexport function getAnimations(array){\r\n    const animation =[];\r\n    if (array.length<=1) return array;\r\n    const auxarray = array.slice();\r\n    mergeSort(array, 0, array.length-1,auxarray, animation);\r\n    return animation;\r\n    \r\n}\r\n\r\nfunction mergeSort(\r\n    auxarray,start, end, mainArray, animation\r\n){\r\n    if (start=== end) return;\r\n    \r\n    \r\n    const middle = Math.floor((start+end)/2);\r\n    mergeSort(mainArray, start, middle, auxarray,animation);\r\n    mergeSort(mainArray, middle+1,end, auxarray,animation);\r\n    console.log(mainArray);\r\n    console.log(auxarray);\r\n    domerge(mainArray, start, middle,end, auxarray, animation);\r\n}\r\n\r\nfunction domerge(mainArray, start, middle, end, auxarray,animation){\r\n \r\n    let k = start;\r\n    let i = start;\r\n    let j = middle + 1;\r\n    while (i <= middle && j <= end) {\r\n      \r\n      animation.push([i, j]);\r\n      animation.push([i, j]);\r\n  \r\n      if (auxarray[i] <= auxarray[j]) {\r\n        \r\n        animation.push([k, auxarray[i]]);\r\n        mainArray[k++] = auxarray[i++];\r\n      } else {\r\n        \r\n        animation.push([k, auxarray[j]]);\r\n        mainArray[k++] = auxarray[j++];\r\n      }\r\n    \r\n    }\r\n    while (i <= middle) {\r\n      \r\n      animation.push([i, i]);\r\n      animation.push([i, i]);\r\n     \r\n      animation.push([k, auxarray[i]]);\r\n      mainArray[k++] = auxarray[i++];\r\n    }\r\n    while (j <= end) {\r\n      \r\n      animation.push([j, j]);\r\n      animation.push([j, j]);\r\n      \r\n      animation.push([k, auxarray[j]]);\r\n      mainArray[k++] = auxarray[j++];\r\n    }\r\n  } \r\n","\r\n//this way animation is returned befor completion of program.\r\n//we need to have a funcytion in which final function is called after all entries are done in animation array.\r\n// export function quick(arr, left, right) {\r\n// \tlet index;\r\n// \tlet animation=[];\r\n\r\n// \tif (arr.length > 1)\t{\r\n// \t\tindex = sortingUsingPivot(arr, left, right, animation);\r\n\r\n// \t\tif (left < index - 1) {\r\n// \t\t\tquick(arr, left, index - 1);\r\n// \t\t}\r\n\r\n// \t\tif (index < right) {\r\n// \t\t\tquick(arr, index, right);\r\n// \t\t}\r\n// \t}\r\n// \treturn animation;\r\n// } \r\nexport function getAnimation(array){\r\n    const animation =[];\r\n    if (array.length<=1) return ['x',array];\r\n   \r\n    quick(array, 0, array.length-1, animation);\r\n    return animation;\r\n    \r\n}\r\nexport function quick(arr, left, right, animation) {\r\n\t\tlet index;\r\n\t\t\r\n\t\r\n\t\tif (arr.length > 1)\t{\r\n\t\t\tindex = sortingUsingPivot(arr, left, right, animation);\r\n\t\t\r\n\t\r\n\t\t\tif (left < index - 1) {\r\n\t\t\t\tquick(arr, left, index - 1, animation);                         //earlier every time here new animation was formed now will will pass onle one to all the recurssive calls.\r\n\t\t\t}\r\n\t\r\n\t\t\tif (index <= right) {                          //here equal sign was missing so last value wasnt getting swapped leading to no color change\r\n\t\t\t\tquick(arr, index, right, animation);          //and creating a isue so that we had to use y.\r\n\t\t\t}\r\n\t\t\t// animation.push(['y',right]);      //In while r-- happens so last element does not get swapped with itself so it's color doesnt change.\r\n\t\t}\r\n\t\t}\r\nfunction sortingUsingPivot(arr, l, r,animation) {\r\n\tlet pivot = arr[l];\r\n\r\n  \r\n\twhile (l <= r) {\r\n\t\tanimation.push(['x',l]);\r\n\t\tanimation.push(['x',r]);\r\n\r\n\t\twhile (arr[l] < pivot) {\r\n\t\t\r\n\t\t\tl++;\r\n\t\t\t//when we want to do it turn red we will pass\r\n\t\t\t// x then it will know ki comparison hora hai\r\n\t\r\n\t\t}\r\n\r\n\t\twhile (arr[r] > pivot) {\r\n\t\t\t\r\n\t\t\tr--;\r\n\t\t\t\r\n\t\t} \r\n\r\n\t\tif (l <=r) {\r\n\t\t\tSwap(arr, l, r,animation);\r\n\t\t\tl++;\r\n\t\t\tr--;\r\n\t\t}\r\n    }\r\n    \r\n  \r\n\treturn l;\r\n\t\r\n}\r\n//function with less arguments\r\n// function swap(arr, leftIndex, rightIndex) {\r\n// \tlet temp = arr[leftIndex];\r\n// \tarr[leftIndex] = arr[rightIndex];\r\n// \tarr[rightIndex] = temp;\r\n// }\r\n\r\nfunction Swap(arr, leftIndex, rightIndex,animation) {\r\n\t\r\n\tanimation.push([rightIndex, arr[leftIndex]]);\r\n\tanimation.push([leftIndex, arr[rightIndex]]);\r\n\t\r\n\tlet temp = arr[leftIndex];\r\n\tarr[leftIndex] = arr[rightIndex];\r\n\tarr[rightIndex] = temp;\r\n\t\r\n}","import React from \"react\";\r\nimport {linearSearch} from \"./linear\";\r\nimport {getAnimations} from \"./MergeSort\";\r\nimport { useState } from \"react\";\r\nimport {getAnimation} from \"./quick\";\r\n\r\n\r\n function Body() {\r\n     const initialCount = 10;  //test number for searching\r\n    let [array,setArray]= useState([initialCount]);\r\n    const ANIMATION_SPEED_MS = 30;\r\n const PRIMARY_COLOR = 'turquoise';\r\nconst SECONDARY_COLOR = 'red';\r\nconst FINAL_COLOR ='limegreen';\r\n\r\n//basically, initially resest is hidden and display is visible which on click makes reset visible and hides itself, resest \r\n//on click refreshes the page to get initial setting (resest is hidden and display is visible) back.\r\n\r\n// reset button is only used to refresh the page to solve the color problem\r\n    const generateArray=()=>{\r\n\r\n      window.location.reload();\r\n\r\n    }\r\n\r\n    const callMe=()=>{\r\n      \r\n        array.length=0;\r\n        \r\n      resetArray();\r\n      //it hiddes itself \r\n      document.getElementById('togglee').style.visibility = 'hidden';\r\n      document.getElementById('togglee2').style.visibility = 'visible';  /*bcz we want it to show when we need to regenerate the array*/\r\n    \r\n     //reset array button is hidden and becomes visible if array is generated once.Then, on refreshing page again it becomes\r\n     //hidden by defaut and display array button takes over and generates the array.\r\n     \r\n        \r\n    }\r\n    const resetArray =()=>{\r\n    const size= prompt(\"no of bar graphs you want?\");\r\n\r\n    \r\n            for (let i = 0; i < size; i++) {\r\n                \r\n                let randomNumber = Math.floor(Math.random() * 600 ) + 5;\r\n                setArray((Array)=>[...Array,randomNumber]);\r\n              //   const arrayBar = document.getElementsByClassName('array_bars');\r\n              //    const barStyle= arrayBar[i].style;\r\n              //  barStyle.backgroundColor = 'turquoise' ;\r\n                }\r\n         \r\n       return 0;\r\n                }\r\n                const width= 1200/array.length;\r\n                  \r\n \r\n//quick sort  code\r\nconst quickSort =async()=>{\r\nconsole.log(array);\r\n  \r\n  const animation=getAnimation(array);\r\n  console.log(array);\r\n  console.log(animation);\r\n  \r\n  for (let i = 0; i < animation.length; i++) {\r\n    const arrayBars = document.getElementsByClassName('array_bars');\r\n  const [value1,value2]= animation[i];\r\n  if(value1==='x'){\r\n    const barStyle = arrayBars[value2].style;\r\n    setTimeout(() => {\r\n\r\n      barStyle.backgroundColor = SECONDARY_COLOR;\r\n    \r\n    }, i * ANIMATION_SPEED_MS);\r\n  }\r\n  // else if(value1==='y'){\r\n  //   const barStyle = arrayBars[value2].style;\r\n  //   setTimeout(() => {\r\n\r\n  //     barStyle.backgroundColor = 'purple';\r\n    \r\n  //   }, i * ANIMATION_SPEED_MS);\r\n  // }\r\n  else{\r\n    const barStyle = arrayBars[value1].style;\r\n   \r\n\r\n    setTimeout(() => {\r\n\r\n     barStyle.backgroundColor = FINAL_COLOR;\r\n     barStyle.height=`${value2}px`;\r\n    }, i * ANIMATION_SPEED_MS*10);\r\n  \r\n  }\r\n  }\r\n\r\n  \r\n \r\n}\r\n\r\n\r\n\r\n//linear search code\r\n\r\n\r\n\r\nconst linear=()=>{\r\n\r\n  console.log(array);\r\n\r\n  let count=0;\r\n  const key= prompt(\"which Number are you looking for?\");  //prompt returns string as output \r\n  if(key>0){\r\n  const animations= linearSearch(array,key);\r\n  \r\n  console.log(animations);\r\n \r\n\r\n  for (let i = 0; i < animations.length; i++) {\r\n    const arrayBars = document.getElementsByClassName('array_bars');\r\n    const [barIdx,bool] = animations[i];\r\n\r\n    if(barIdx>=0){\r\n    const barStyle = arrayBars[barIdx].style;\r\n    setTimeout(() => {\r\n      // const color = bool == 'true' ? 'purple' : 'red';\r\n      if(bool=='true'){\r\n      barStyle.backgroundColor = 'purple';\r\n      count++;\r\n      \r\n      }\r\n      else{\r\n       barStyle.backgroundColor='red'; \r\n      }\r\n\r\n    }, i * ANIMATION_SPEED_MS*10);\r\n\r\n  }\r\n}\r\n\r\n// if(count){\r\n//   display_result('DISPLAY_RESULT_LS');\r\n// }\r\n// else{\r\n//   display_result('DISPLAY_RESULT_LS2');\r\n// }\r\n\r\n  }\r\n}\r\n\r\n//merge sort code\r\n    const mergeSort =()=>{\r\n      console.log(array);\r\n    \r\n        const animations=  getAnimations(array);\r\n      \r\n        // console.log(animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array_bars');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n              const [barOneIdx, barTwoIdx] = animations[i];\r\n              // console.log(barOneIdx,barTwoIdx);\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              const barTwoStyle = arrayBars[barTwoIdx].style;\r\n              const color = i % 3 === 0 ? SECONDARY_COLOR : FINAL_COLOR;\r\n              setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n              setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n               \r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.backgroundColor = FINAL_COLOR;\r\n                barOneStyle.height = `${newHeight}px`;\r\n              }, i * ANIMATION_SPEED_MS);\r\n            }\r\n\r\n          }\r\n         \r\n      // const javaScriptSortedArray = array.slice().sort();\r\n      // const mergeSortedArray = array.slice();\r\n      // const output=arraysAreEqual(javaScriptSortedArray, mergeSortedArray);\r\n      // if(output){\r\n      //  sorted();\r\n      // }\r\n     \r\n      \r\n         \r\n    }\r\n\r\n    \r\n    function arraysAreEqual(arrayOne, arrayTwo) {\r\n      if (arrayOne.length !== arrayTwo.length) return false;\r\n      for (let i = 0; i < arrayOne.length; i++) {\r\n        if (arrayOne[i] !== arrayTwo[i]) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    const sorted=() =>{\r\n\r\n      for(let j=0;j<array.length;j++){\r\n        const arraybars = document.getElementsByClassName('array_bars');\r\n      const barstyle=arraybars[j].style;\r\n      barstyle.backgroundColor='purple';\r\n   \r\n      }\r\n    }\r\n   \r\n    return(\r\n        \r\n       <div >\r\n       <nav  id=\"bt\"class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n     \r\n  <a class=\"bt navbar-brand\" href=\"#\">Sorting Visualizer</a>\r\n \r\n  <button className=\"bt text-white \"  id=\"togglee2\"onClick={generateArray} style={{visibility:'hidden'}}>RESET ARRAY</button> \r\n  <button className=\"bt text-white \" id=\"togglee\" onClick={callMe}>DISPLAY ARRAY</button>\r\n        <button className=\"bt text-white\" onClick={mergeSort}>MERGE SORT</button>\r\n        <button className=\"bt text-white\" onClick={quickSort}>QUICK SORT</button>\r\n        <button className=\"bt text-white\" onClick={linear}>LINEAR SEARCH</button>\r\n  \r\n  \r\n</nav>\r\n\r\n       <div className=\"content\">\r\n       {/* <div>\r\n       <h1 ID=\"DISPLAY_RESULT_LS\" style={{visibility:'hidden'}}>KUDOS! MATCH FOUND.</h1>\r\n       <h1 ID=\"DISPLAY_RESULT_SORT\" style={{visibility:'hidden'}}> SORTED!✌️</h1>\r\n       <h1 ID=\"DISPLAY_RESULT_LS2\" style={{visibility:'hidden'}}>OOPS! NO MATCH.</h1>\r\n       </div> */}\r\n\r\n       <div className= \" array_section\">\r\n      \r\n     \r\n       {array.map((value,index)=>(\r\n           <div className=\"array_bars\" key={index} style={{ backgroundColor:PRIMARY_COLOR, height:`${value}px`, width: `${width}px`} }></div> \r\n       ))}\r\n\r\n      \r\n        <div className=\"footer fixed-bottom\">\r\n      \r\n      <div className=\"space\">SRISHTY TAKYAR_2020  Sorting visualizer_© \r\n   </div>\r\n        </div> \r\n        \r\n        </div>\r\n         </div>\r\n         \r\n      \r\n       </div>\r\n        \r\n    )\r\n}\r\nexport default Body;\r\n","export function linearSearch(array, key){\r\n    const animation = [];\r\n    for(let i = 0; i < array.length; i++){\r\n\r\n        if(array[i] == key){   // == will be used because we donot know the data types( === req datatypes to be exactly same )\r\n\r\n            animation.push([i,'true']);\r\n            break;\r\n          \r\n        }\r\n        else{\r\n            animation.push([i,'false']);\r\n        }\r\n    }\r\n    // If results array is empty, return -1\r\n    let size=animation.length;\r\n    if(!size){\r\n        animation.push([-1,-1]);\r\n    }\r\n\r\n    return animation;\r\n}","import React from 'react';\r\nimport Body from \"./components/Body.jsx\";\r\nimport Footer from './components/Footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div >\r\n      \r\n      <Body />\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./styles/main.css\"\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}